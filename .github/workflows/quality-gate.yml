name: Quality Gate CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Code style check with black
      run: |
        black --check --diff src/ tests/ || (echo "‚ùå Code style check failed. Run 'black src/ tests/' to fix." && exit 1)
        
    - name: Lint with ruff
      run: |
        ruff check src/ tests/ || (echo "‚ùå Linting failed. Check ruff output above." && exit 1)
        
    - name: Schema validation tests
      run: |
        echo "üî¨ Running schema validation tests..."
        python -m pytest tests/test_schema.py -v --tb=short
        
    - name: Overlay validation tests  
      run: |
        echo "üéØ Running overlay validation tests..."
        python -m pytest tests/test_overlay.py -v --tb=short
        
    - name: License compliance check
      run: |
        echo "‚öñÔ∏è Running license compliance check..."
        python -m pytest tests/test_license_compliance.py -v --tb=short
        
    - name: Symbol manifest validation
      run: |
        echo "üìã Validating symbols manifest..."
        if [ -f "symbols/symbols_manifest.yaml" ]; then
          python -c "
          import yaml
          with open('symbols/symbols_manifest.yaml', 'r') as f:
              manifest = yaml.safe_load(f)
          print(f'‚úì Manifest loaded successfully')
          print(f'‚úì Found {len(manifest.get(\"symbols\", []))} symbol definitions')
          "
        else
          echo "‚ö†Ô∏è symbols_manifest.yaml not found - skipping validation"
        fi
        
    - name: SVG render test
      run: |
        echo "üñºÔ∏è Testing SVG rendering..."
        python -c "
        import cairosvg
        from pathlib import Path
        import tempfile
        
        symbols_dir = Path('symbols')
        if symbols_dir.exists():
            svg_files = list(symbols_dir.glob('*.svg'))
            if svg_files:
                print(f'Testing {len(svg_files)} SVG files...')
                for svg_file in svg_files:
                    try:
                        with tempfile.NamedTemporaryFile(suffix='.png') as tmp:
                            cairosvg.svg2png(url=str(svg_file), write_to=tmp.name, output_width=32, output_height=32)
                        print(f'‚úì {svg_file.name}')
                    except Exception as e:
                        print(f'‚úó {svg_file.name}: {e}')
                        raise
            else:
                print('‚ö†Ô∏è No SVG files found')
        else:
            print('‚ö†Ô∏è symbols/ directory not found')
        "
        
    - name: IoU regression test
      run: |
        echo "üìê Running IoU regression tests..."
        python -c "
        # Quick IoU validation test
        def compute_iou(box1, box2):
            x1_inter = max(box1['x'], box2['x'])
            y1_inter = max(box1['y'], box2['y'])
            x2_inter = min(box1['x'] + box1['w'], box2['x'] + box2['w'])
            y2_inter = min(box1['y'] + box1['h'], box2['y'] + box2['h'])
            
            if x2_inter <= x1_inter or y2_inter <= y1_inter:
                return 0.0
                
            intersection = (x2_inter - x1_inter) * (y2_inter - y1_inter)
            area1 = box1['w'] * box1['h']
            area2 = box2['w'] * box2['h']
            union = area1 + area2 - intersection
            
            return intersection / union if union > 0 else 0.0
        
        # Test cases
        test_cases = [
            # Perfect match
            ({'x': 10, 'y': 10, 'w': 20, 'h': 20}, {'x': 10, 'y': 10, 'w': 20, 'h': 20}, 1.0),
            # No overlap
            ({'x': 10, 'y': 10, 'w': 20, 'h': 20}, {'x': 50, 'y': 50, 'w': 20, 'h': 20}, 0.0),
            # Partial overlap
            ({'x': 10, 'y': 10, 'w': 20, 'h': 20}, {'x': 20, 'y': 20, 'w': 20, 'h': 20}, 0.25),
        ]
        
        for i, (box1, box2, expected) in enumerate(test_cases):
            iou = compute_iou(box1, box2)
            assert abs(iou - expected) < 0.001, f'Test {i+1} failed: {iou} != {expected}'
            print(f'‚úì IoU test {i+1}: {iou:.3f}')
            
        print('‚úì All IoU tests passed')
        "
        
    - name: Generate coverage report
      run: |
        echo "üìä Generating test coverage report..."
        python -m pytest tests/ --cov=src --cov-report=xml --cov-report=html || echo "Coverage report generation completed with warnings"
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Build demo page (if possible)
      run: |
        echo "üé® Attempting to build demo page..."
        python -c "
        try:
            import sys
            sys.path.append('src')
            
            # Try to import and run basic page generation
            print('Checking if page generation is available...')
            # This will be implemented by LayoutLab agent
            print('‚ö†Ô∏è Demo page generation not yet implemented')
        except ImportError as e:
            print(f'‚ö†Ô∏è Demo page generation dependencies not ready: {e}')
        except Exception as e:
            print(f'‚ö†Ô∏è Demo page generation failed: {e}')
        "
        
    - name: Quality Gate Summary
      if: always()
      run: |
        echo "üèÅ Quality Gate Summary"
        echo "======================"
        echo "‚úÖ Code style (black): ${{ job.status }}"
        echo "‚úÖ Linting (ruff): ${{ job.status }}"  
        echo "‚úÖ Schema tests: ${{ job.status }}"
        echo "‚úÖ Overlay tests: ${{ job.status }}"
        echo "‚úÖ License compliance: ${{ job.status }}"
        echo "‚úÖ SVG rendering: ${{ job.status }}"
        echo "‚úÖ IoU regression: ${{ job.status }}"
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ All quality checks passed!"
        else
          echo "‚ùå Some quality checks failed"
          exit 1
        fi